
(require e2d/ctx)
; (current-e2d-context)
; (with-new-e2d-context fn)
; (e2d-set-title [title] [ctx])
; (e2d-set-windowed [w h] [resizable?] [ctx])
; (e2d-set-fullscreen [ctx])
; (e2d-get-size [ctx])
; (e2d-add-hook evt-name fn)

(require e2d/math)
; v2?, tmat?
; tau, deg/rad, rad/deg
; (v2-unit ang), (v2-unit/deg ang)
; (v2+ u v)
; (v2* v x), (v2* x v)
; (tmat-identity)
; (tmat* m ...)
; (tmat* m ... v)
; (tmat-rotated r)
; (tmat-translated v)
; (tmat-scaled x), (tmat-scaled v)

(require e2d/content)
; content-mgr
;   resource?, texture?
;   tileset?, animation?, font?
;   sound?
; (queue-texture path-string mgr)
; (queue-animation path-string mgr)
; (queue-sound path-string mgr)
; (queue-tileset path-string mgr)
; (resource-loaded? res)
; (load-all-content mgr)
; (tileset-texture ts x-coord y-coord)
; (animation-texture ani ms)

(require e2d/draw)
; color?
; (draw-texture tex
;               [pos]
;               #:size [siz]
;               #:origin [org]
;               #:rotation [rot])
; (draw-texture tex w h transform)
; (draw-shape pts stroke fill)
; (draw-shape pts stroke fill [transform t])

(require e2d/engine)
; scene?, entity?, component%
; (make-scene)
; (tick-scene), (draw-scene)
; (make-entity scn comps)
; (make-entity* scn comps ...)
; (add-component! ent comp)
; (remove-component! ent comp)
; (send comp added-to)
; (send comp removed-from)
; (send comp on-tick)
; (send comp on-draw-pre)
; (send comp on-draw)
; (send comp camera-transform)

(require e2d)
; all of the above


(require e2d/extra/comps)
; moving-component%
; texture-component%
